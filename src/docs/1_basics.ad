== Basics 

=== Scalar literals

==== Strings

[source, clojure]
.String length
----
include::{testDir}/rabbit/typestest.clj[tags=scalar1,indent=0] 
----

[source, clojure]
.String multiline 
----
include::{testDir}/rabbit/typestest.clj[tags=scalar2,indent=0] 
----

[source, clojure]
.Characters
----
include::{testDir}/rabbit/typestest.clj[tags=scalar3,indent=0] 
----

==== Nil 

[source, clojure]
.Nil evaluates to false in a condition expression
----
include::{testDir}/rabbit/typestest.clj[tags=scalar4,indent=0] 
----

==== Keywords

[source, clojure]
.Keywords as a map key
----
include::{testDir}/rabbit/typestest.clj[tags=scalar5,indent=0] 
----

[source, clojure]
.Keywords with namespaces 
----
include::{testDir}/rabbit/typestest.clj[tags=scalar6,indent=0] 
----

[source, clojure]
.Numbers
----
include::{testDir}/rabbit/typestest.clj[tags=scalar7,indent=0] 
----

WARNING: There are a couple of coercion examples. It seems it always
apply the coercion to the upper bound.

[source, clojure]
.Regular expressions
----
include::{testDir}/rabbit/typestest.clj[tags=scalar8,indent=0] 
----

=== Code blocks: "do"

*_do_* executes all expressions inside in order, and returns the value returned by the last
expression.

[source, clojure]
.do
----
include::{testDir}/rabbit/basicstests.clj[tags=basics1,indent=0] 
----

=== Collections

Clojure has its own set of collections. Most of the data structures (if not all) are persistent data
structures.

[, Wikipedia]
""
... a persistent data structure is a data structure that always preserves the previous version of itself
when it is modified. Such data structures are efectively immutable, as their operations do not (visibly) 
update the structure in-place, but instead always yield a new updated structure.
""
[source, clojure]
.collections
----
include::{testDir}/rabbit/basicstests.clj[tags=basics2,indent=0] 
----

=== Defining vars: def

[source, clojure]
.Defining different types
----
include::{testDir}/rabbit/basicstests.clj[tags=basics3a,indent=0] 
----

[source, clojure]
.Defining different types
----
include::{testDir}/rabbit/basicstests.clj[tags=basics3b,indent=0] 
----

[source, clojure]
.Defining different types
----
include::{testDir}/rabbit/basicstests.clj[tags=basics3c,indent=0] 
----

=== Local bindings: let 

*_let_* make possible to define local variables or variables bound to
the surrounding lexical scope.

[source, clojure]
.Let
----
include::{testDir}/rabbit/basicstests.clj[tags=let1,indent=0] 
----

[source, clojure]
.Destructuring with let
----
include::{testDir}/rabbit/basicstests.clj[tags=let2,indent=0] 
----

Lets say we had a list of numbers:

[source, clojure]
.Destructuring with let 2a
----
include::{testDir}/rabbit/basicstests.clj[tags=let3,indent=0] 
----

And we want to assign certain values from the list to some variables
*_x, y_* and *_z_*:

[source, clojure]
.Destructuring with let 2b
----
include::{testDir}/rabbit/basicstests.clj[tags=let4,indent=0] 
----

Destructuring allows us to assign variables using certain *_conventions_* or *_pattern matching_*. In
this particular case we are assigning the values to the variables following declaration order.

[source, clojure]
.Destructuring with let 2c
----
include::{testDir}/rabbit/basicstests.clj[tags=let5,indent=0] 
----

=== Functions

[source, clojure]
.Anonymous functions
----
include::{testDir}/rabbit/basicstests.clj[tags=fn1,indent=0] 
----

[source, clojure]
.Function declaration
----
include::{testDir}/rabbit/basicstests.clj[tags=fn2,indent=0] 
----

[source, clojure]
.Variadic functions
----
include::{testDir}/rabbit/basicstests.clj[tags=fn3,indent=0] 
----

[source, clojure]
.Using function literals
----
include::{testDir}/rabbit/basicstests.clj[tags=fn4,indent=0] 
----

WARNING: Function literals can't be nested

=== Conditionals: if

[source, clojure]
.Using if
----
include::{testDir}/rabbit/basicstests.clj[tags=conditionals1,indent=0] 
----

=== Recursion

[source, clojure]
.Using recur
----
include::{testDir}/rabbit/basicstests.clj[tags=loop_and_recursion,indent=0] 
----

=== Java interop

[source, clojure]
.Instantiation and method invocation
----
include::{testDir}/rabbit/basicstests.clj[tags=java_interop,indent=0] 
----

=== Try-catch

[source, clojure]
.Try catch
----
include::{testDir}/rabbit/basicstests.clj[tags=try_catch,indent=0] 
----
